package testkit

import (
	"context"
	"testing"

	"github.com/sirupsen/logrus"
	"github.com/stretchr/testify/require"
)

// TestingSuite can store and return the current *testing.T context
// generated by 'go test'.
type TestingSuite interface {
	// T retrieves the current *testing.T context.
	T() *testing.T

	// SetT sets the current *testing.T context.
	SetT(*testing.T)

	// SetS needs to set the current test suite as parent to get access to the parent methods
	SetS(suite TestingSuite)

	// GetContext returns the context created for the current test, if not exists then creates a new context and returns
	GetContext() context.Context

	// Require returns a require.Assertions object to make assertions
	Require() *require.Assertions

	// Logger returns the logger
	Logger() logrus.FieldLogger
}

// OnlyOnce has a Do method, which will run only once.
type OnlyOnce interface {
	DoOnce(*testing.T) error
}

// SetupSuite has a SetupSuite method, which will run before the tests in the suite are run.
type SetupSuite interface {
	SetupSuite()
}

// SetupTest has a SetupTest method, which will run before each test in the suite.
type SetupTest interface {
	SetupTest()
}

// TearDownSuite has a TearDownSuite method, which will run after all the tests in the suite have been run.
type TearDownSuite interface {
	TearDownSuite()
}

// TearDownTest has a TearDownTest method, which will run after
// each test in the suite.
type TearDownTest interface {
	TearDownTest()
}
